package calc;

public class CalcOperations {
// класс для методов совершения операций при обработке нажатий функциональных клавиш калькулятора
	
	//метод  вызываемый при необходимости выполнения операции над операндом 1 и операндом 2 с занесением
	//результата в операнд 1 
	//вызов метода предполагается при больше чем первом нажатии клавиши операции или при нажатии клавиши "="
	//метод не имеет входящих параметров и ничего не возвращает - он использует поля операнд1, операнд2 и поле операции оперейшен
	public static void makeOper () 
	{
		switch (CalcListener.operation) {
		case '+':
			System.out.println("выбрана клавиша операции");
			System.out.println("до операции  операнды " + CalcListener.operand1 + "   " + CalcListener.operand2);
			CalcListener.operand1 = CalcListener.operand1 + CalcListener.operand2;
			Calc.calcTF.setText(String.valueOf(CalcListener.operand1));
			break;
			
		case '-':
			CalcListener.operand1 = CalcListener.operand1 - CalcListener.operand2;
			Calc.calcTF.setText(String.valueOf(CalcListener.operand1));
			break;
			
		case '*':
			CalcListener.operand1 = CalcListener.operand1 * CalcListener.operand2;
			Calc.calcTF.setText(String.valueOf(CalcListener.operand1));
			break;	
			
		case '/':
			CalcListener.operand1 = CalcListener.operand1 / CalcListener.operand2;
			Calc.calcTF.setText(String.valueOf(CalcListener.operand1));
			break;	

		
		
		default:
			break;
		}
		
		//System.out.println("выполнить операцию и занести результат в операнд1");
	}
	
	
		
	//метод преобразующий значение строки текстфилда в число типа дабл для занесения в операнд
	//метод возвращает число типа флоат, тип флоат выбран для возможности работы с нецелыми числами
	public static Double getTFDigitValue ()
	{	
		//метод делает анализ на наличия знака операции в текстфилде и отбрасывает его
		//знак операции у меня изначально задан тремя символаами (пробел-знак-пробел)
		//предварительно анализируем текстфилд на длину более трех
		if (Calc.calcTF.getText().length() > 3) 
			{ //длина текстфилда больше трех
				//анализируем первые три символа на соответствие знаку операции
				//если первые три символа текстфилда равны одной из комбинаций значений клавиш функций, то берем текстфилд без первых трех символов
				if (  (Calc.calcTF.getText().substring(0,3).equals(" + ")) ||
				      (Calc.calcTF.getText().substring(0,3).equals(" - ")) ||
				      (Calc.calcTF.getText().substring(0,3).equals(" * ")) ||
				      (Calc.calcTF.getText().substring(0,3).equals(" / "))    ) 
							{ //в начале текстфилда знак операции
								//возврат преобразованного в тип дабл взятого геттером значения текстфилда калькулятора за вычетом трех первых символов знака операции
								return Double.valueOf(Calc.calcTF.getText().substring(3));
							} //в начале текстфилда знак операции
				else // если первые три символа не значение клавиши функции ( а к примеру цифры или знак минус с цифрами)
							{ //в начале тектсфтлда нет знака операции
								//возврат преобразованного в тип дабл взятого геттером значения текстфилда калькулятора
								return Double.valueOf(Calc.calcTF.getText());
							} //в начале тектсфтлда нет знака операции
			} //длина текстфилда больше трех
		else 
			{ //если длина текстфилда не больше трех знаков
				return Double.valueOf(Calc.calcTF.getText());
			} //если длина текстфилда не больше трех знаков
			
	}	//конец метода возвращающего флоат число из текстфилда калькулятора
	
	
	//метод изменяющий знак содержимого текстфилда
	//метод преобразует текстфилд в число, умножает на -1 и возвращает преобразованный в строку результат
	public static String plusMinus ()
	{
		return String.valueOf(-getTFDigitValue()) ;
	}
	
	
	//метод удаляющий последний символ текстфилда (клавиша del)
	//метод возвращает строку текстфилда без последнего символа
	public static String delLastDigit ()
	{
		//проверяем длину содержимого текстфилда во избежание эксепшена 
		if (Calc.calcTF.getText().length() > 0)
			{ //если длина содержимого текстфилда больше нуля , возвращаем содержимое без последнего символа
				return Calc.calcTF.getText().substring(0, Calc.calcTF.getText().length()-1);
			} //если текстфилд больше ноля	
		else
			{ //если длина содержимого текстфилда не больше нуля ( а по сути равна нулю), возращаем пустое место
				return "";
			} //длина содержимого текстфилда не больше нуля
		
	} //метод удаляющий последний символ текстфилда 
	
	
	
	//метод считающий квадратный корень из числа
	//метод возвращает значение типа дабл
	public static double getSqr()
	{ //метод вычисления квадратного корня
		return Math.sqrt(CalcOperations.getTFDigitValue());
	} //метод вычисления квадратного корня
	
	
	//метод считающий проценты от операнда1 , величина процентов берется в текстфилде
	//метод возвращает значение типа дабл
	public static double getPercent()
	{ //метод вычисления процентов
		return (CalcListener.operand1 * CalcOperations.getTFDigitValue() / 100 );
	} //метод вычисления процентов
	
	
	
	// метод производящий все необходимые сопутствующие действия по нажатию клавиши равно
	//сделан для оптимизации кода при обработке комбинаций нажатий клавиш, которым присвоено значение как у клавиши "равно"
	//метод не имеет входящих параметров и ничего не возвращает
	
	public static void equalPushing () 
	{
		
		System.out.println("нажата кнопка равно " );
		System.out.println("до операции равно операнды " + CalcListener.operand1 + "   " + CalcListener.operand2);

		
		//делаем анализ на значение счетчика нажатий функций
		//если счетчик = 1, значит обрабатывается последовательность вида ( число + = ) или (число + число =)
		if  	(CalcListener.pushFuncCounter == 1)
			{ //было одно нажатие клавиши операции
				
				//загоняем во Операнд2 содержимое текстфилда если в текстфилде находится число, а не знак операции
				//этим мы обрабатываем ситуацию ввода типа число + число = , т.е. когда нам нужно получить второй операнд, неравный первому
				//сделаем условие проверки текстфилда на соответствие  знак операции + цифры
				//знаки операции изначально заданы тремя символами вида " + ", т.е знак окружен пробелами, было сделано для выравнивания ширины клавиш в конструкторе окна
				//если после знака операции вводились цифры, то длина текстфилда будет больше трех
				//т.о. достаточно проверить длину текстфилда, если она больше трех, содержимое текстфилда идет в Операнд2
				if (Calc.calcTF.getText().length() > 3) 
			//		{ //текстфилд длиннее трех символов
					CalcListener.operand2 = 	CalcOperations.getTFDigitValue();
			//		} //текстфилд длиннее трех символов
			
				
				//делаем вызов метода выполнения операции
				//метод выполняет действие над операндами и забрасывает результат в операнд1
				CalcOperations.makeOper();
		
				System.out.println("после операции равно операнды " + CalcListener.operand1 + "   " + CalcListener.operand2);
				Calc.calcTF.setText(String.valueOf(CalcListener.operand1));
			} //было одно нажатие клавиши операции
		
		
		//далее отловим ситуацию когда идет набор типа число + число + число =
		//в таком случае значение счетчика нажатий клавиши операции будет более 1
		else if (CalcListener.pushFuncCounter > 1) 
			{ //счетчик нажатий клавиш операций больше единицы
				
				//возьмем значение текстфилда в операнд2
				CalcListener.operand2 = 	CalcOperations.getTFDigitValue();
				//делаем вызов метода выполнения операции
				//метод выполняет действие над операндами и забрасывает результат в операнд1
				CalcOperations.makeOper();
				//устанавливаем в текстфилд результат операции и делаем для проверки вывод операндов на консоль
				System.out.println("после операции равно операнды " + CalcListener.operand1 + "   " + CalcListener.operand2);
				Calc.calcTF.setText(String.valueOf(CalcListener.operand1));
				
				//обнуление счетчика нажатий клавиш операций
				CalcListener.pushFuncCounter = 0;
			} //счетчик нажатий клавиш операций больше единицы
		
		//обработаем ситуацию, когда после выполнения операции по клавише равно потом еще раз набирается равно
		//теоретически мы должны сделать следующее
		// (текстфилд(или операнд1) - предыдущая операция - операнд2)  - получить результат и положить его в операнд1 и текстфилд
		//предпочитетльно всетаки взять текстфилд в операнд1 заново, на случай если мы после получений результата изменили знак результата или убрали пару символов
		//с учетом 	инициализации счетчика нажатий функций в ноль при предыдущей обработке делаем проверку
		else if (CalcListener.pushFuncCounter == 0)  
			{ //повторное нажатие клавиши равно
				
				//в операнд1 загнали содержимое текстфилда
				CalcListener.operand1 = 	CalcOperations.getTFDigitValue();
				//вывод операндов и операции для проверки
				System.out.println("после операции равно операнды " + CalcListener.operand1 + "   " + CalcListener.operand2);
				System.out.println("операция " + CalcListener.operation);
				//вызов метода выполнения операции
				CalcOperations.makeOper();
				
			}
	} //конец метода нажатия клавиши равно
	
	
	// метод нажатия клавиши сброса С
	//метод написан для оптимизации кода в классе с обработчиками нажатий
	//метод не имеет параметров и ничего не возвращает
	//модификаторы паблик и статик для удобства вызова и досутпности
		
	public static void resetPushing ()
	{
		Calc.calcTF.setText("");
		CalcListener.operand1 = 0;
		CalcListener.operand2 = 0;
		CalcListener.pushFuncCounter = 0;
	}

	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
